generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(255)
  description  String?
  logo_url     String?        @db.VarChar(500)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  created_by   String
  updated_by   String?
  company_role company_role[]
}

model college {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String
  updated_by String?
}

model role {
  id                  Int            @id @default(autoincrement())
  role_type           role_type      @unique
  experience_in_years String         @db.VarChar(10)
  created_at          DateTime?      @default(now()) @db.Timestamp(6)
  updated_at          DateTime?      @default(now()) @db.Timestamp(6)
  created_by          String
  updated_by          String?
  company_role        company_role[]
}

model booking {
  id         Int      @id @default(autoincrement())
  amount     Float
  created_at DateTime @default(now())
  updated_at DateTime
  created_by String
  updated_by String?
}

model company_role {
  id                 Int       @id @default(autoincrement())
  company_id         Int
  role_id            Int
  salary_start_range Int
  salary_end_range   Int
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)
  created_by         String    @db.VarChar(255)
  updated_by         String?   @db.VarChar(255)
  company            company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_company")
  role               role      @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role")
}

enum role_type {
  SDE1
  SDE2
  SDE3
}

enum payment_status {
  PENDING
  FAILED
  SUCCESS
}

model payment {
  id                    Int            @id @default(autoincrement())
  order_id_from_gateway String         @unique
  amount                Float
  status                payment_status
}
